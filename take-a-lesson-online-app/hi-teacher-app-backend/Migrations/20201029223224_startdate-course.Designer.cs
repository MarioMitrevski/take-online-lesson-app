// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hi_teacher_app_backend.Models;

namespace hi_teacher_app_backend.Migrations
{
    [DbContext(typeof(HiTeacherDBContext))]
    [Migration("20201029223224_startdate-course")]
    partial class startdatecourse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("hi_teacher_app_backend.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Artificial Intelligence"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Machine Learning"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Natural Language Processing"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Structural programming"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "OOP Concepts"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "OOP Programming"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Architecture & Organization of Computers"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Sensor systems"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Computer animation"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Visualization"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "C++"
                        },
                        new
                        {
                            CategoryId = 12,
                            CategoryName = "C"
                        },
                        new
                        {
                            CategoryId = 13,
                            CategoryName = "JAVA"
                        },
                        new
                        {
                            CategoryId = 14,
                            CategoryName = "Python"
                        },
                        new
                        {
                            CategoryId = 15,
                            CategoryName = "JavaScript"
                        },
                        new
                        {
                            CategoryId = 16,
                            CategoryName = "Digital Marketing"
                        },
                        new
                        {
                            CategoryId = 17,
                            CategoryName = "Marketing"
                        },
                        new
                        {
                            CategoryId = 18,
                            CategoryName = "Management"
                        },
                        new
                        {
                            CategoryId = 19,
                            CategoryName = "Economics"
                        },
                        new
                        {
                            CategoryId = 20,
                            CategoryName = "Business"
                        },
                        new
                        {
                            CategoryId = 21,
                            CategoryName = "Business & Statistics"
                        },
                        new
                        {
                            CategoryId = 22,
                            CategoryName = "Accounting"
                        },
                        new
                        {
                            CategoryId = 23,
                            CategoryName = "Bookkeeping"
                        },
                        new
                        {
                            CategoryId = 24,
                            CategoryName = "Mathematics"
                        },
                        new
                        {
                            CategoryId = 25,
                            CategoryName = "Mathematics for software engineers"
                        },
                        new
                        {
                            CategoryId = 26,
                            CategoryName = "Mathematics for economists"
                        },
                        new
                        {
                            CategoryId = 27,
                            CategoryName = "Calculus"
                        },
                        new
                        {
                            CategoryId = 28,
                            CategoryName = "Statistics"
                        },
                        new
                        {
                            CategoryId = 29,
                            CategoryName = "Discrete structures"
                        },
                        new
                        {
                            CategoryId = 30,
                            CategoryName = "Discrete Mathematics"
                        });
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricePerStudentForSession")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("courseStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.CourseGroup", b =>
                {
                    b.Property<int>("CourseGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseGroupGoogleMeetLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("EnrolledStudents")
                        .HasColumnType("int");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("int");

                    b.Property<int>("MinStudents")
                        .HasColumnType("int");

                    b.HasKey("CourseGroupId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseGroups");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.CourseTheme", b =>
                {
                    b.Property<int>("CourseThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseThemeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseThemeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseThemeId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseThemes");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.DateTimeSlot", b =>
                {
                    b.Property<int>("DateTimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DateTimeSlotId");

                    b.HasIndex("CourseGroupId");

                    b.ToTable("DateTimeSlots");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.StudentCourseGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourseGroups");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TeacherDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.Course", b =>
                {
                    b.HasOne("hi_teacher_app_backend.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hi_teacher_app_backend.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.CourseGroup", b =>
                {
                    b.HasOne("hi_teacher_app_backend.Models.Course", "Course")
                        .WithMany("CourseGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.CourseTheme", b =>
                {
                    b.HasOne("hi_teacher_app_backend.Models.Course", "Course")
                        .WithMany("CourseThemes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.DateTimeSlot", b =>
                {
                    b.HasOne("hi_teacher_app_backend.Models.CourseGroup", "CourseGroup")
                        .WithMany("DateTimeSlots")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.Student", b =>
                {
                    b.HasOne("hi_teacher_app_backend.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("hi_teacher_app_backend.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.StudentCourseGroups", b =>
                {
                    b.HasOne("hi_teacher_app_backend.Models.CourseGroup", "CourseGroup")
                        .WithMany("StudentCourseGroups")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hi_teacher_app_backend.Models.Student", "Student")
                        .WithMany("StudentCourseGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hi_teacher_app_backend.Models.Teacher", b =>
                {
                    b.HasOne("hi_teacher_app_backend.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("hi_teacher_app_backend.Models.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
